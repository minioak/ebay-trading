<?php
// autogenerated file 30.09.2013 15:20
// $Id: $
// $Log: $
//
//
require_once 'RefundTransactionArrayType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'RefundStatusCodeType.php';
require_once 'RefundFailureReasonType.php';
require_once 'AmountType.php';
require_once 'RefundFundingSourceArrayType.php';

/**
 * Contains information about a single refund. A refund contains information about 
 * theamount refunded for an order line item to a single buyer. <br/><br/> <span 
 * class="tablenote"><strong>Note:</strong> Three RefundType 
 * fields(RefundFromSeller, RefundTime and TotalRefundToBuyer) are returned only if 
 * a refund has been issued against a Half.com order line item.</span> 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/RefundType.html
 *
 */
class RefundType extends EbatNs_ComplexType
{
	/**
	 * @var AmountType
	 */
	protected $RefundFromSeller;
	/**
	 * @var AmountType
	 */
	protected $TotalRefundToBuyer;
	/**
	 * @var dateTime
	 */
	protected $RefundTime;
	/**
	 * @var string
	 */
	protected $RefundID;
	/**
	 * @var RefundTransactionArrayType
	 */
	protected $RefundTransactionArray;
	/**
	 * @var AmountType
	 */
	protected $RefundAmount;
	/**
	 * @var RefundStatusCodeType
	 */
	protected $RefundStatus;
	/**
	 * @var RefundFailureReasonType
	 */
	protected $RefundFailureReason;
	/**
	 * @var RefundFundingSourceArrayType
	 */
	protected $RefundFundingSourceArray;
	/**
	 * @var string
	 */
	protected $ExternalReferenceID;
	/**
	 * @var dateTime
	 */
	protected $RefundRequestedTime;
	/**
	 * @var dateTime
	 */
	protected $RefundCompletionTime;
	/**
	 * @var dateTime
	 */
	protected $EstimatedRefundCompletionTime;
	/**
	 * @var string
	 */
	protected $SellerNoteToBuyer;

	/**
	 * @return AmountType
	 */
	function getRefundFromSeller()
	{
		return $this->RefundFromSeller;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setRefundFromSeller($value)
	{
		$this->RefundFromSeller = $value;
	}
	/**
	 * @return AmountType
	 */
	function getTotalRefundToBuyer()
	{
		return $this->TotalRefundToBuyer;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setTotalRefundToBuyer($value)
	{
		$this->TotalRefundToBuyer = $value;
	}
	/**
	 * @return dateTime
	 */
	function getRefundTime()
	{
		return $this->RefundTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setRefundTime($value)
	{
		$this->RefundTime = $value;
	}
	/**
	 * @return string
	 */
	function getRefundID()
	{
		return $this->RefundID;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setRefundID($value)
	{
		$this->RefundID = $value;
	}
	/**
	 * @return RefundTransactionArrayType
	 */
	function getRefundTransactionArray()
	{
		return $this->RefundTransactionArray;
	}
	/**
	 * @return void
	 * @param RefundTransactionArrayType $value 
	 */
	function setRefundTransactionArray($value)
	{
		$this->RefundTransactionArray = $value;
	}
	/**
	 * @return AmountType
	 */
	function getRefundAmount()
	{
		return $this->RefundAmount;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setRefundAmount($value)
	{
		$this->RefundAmount = $value;
	}
	/**
	 * @return RefundStatusCodeType
	 */
	function getRefundStatus()
	{
		return $this->RefundStatus;
	}
	/**
	 * @return void
	 * @param RefundStatusCodeType $value 
	 */
	function setRefundStatus($value)
	{
		$this->RefundStatus = $value;
	}
	/**
	 * @return RefundFailureReasonType
	 */
	function getRefundFailureReason()
	{
		return $this->RefundFailureReason;
	}
	/**
	 * @return void
	 * @param RefundFailureReasonType $value 
	 */
	function setRefundFailureReason($value)
	{
		$this->RefundFailureReason = $value;
	}
	/**
	 * @return RefundFundingSourceArrayType
	 */
	function getRefundFundingSourceArray()
	{
		return $this->RefundFundingSourceArray;
	}
	/**
	 * @return void
	 * @param RefundFundingSourceArrayType $value 
	 */
	function setRefundFundingSourceArray($value)
	{
		$this->RefundFundingSourceArray = $value;
	}
	/**
	 * @return string
	 */
	function getExternalReferenceID()
	{
		return $this->ExternalReferenceID;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setExternalReferenceID($value)
	{
		$this->ExternalReferenceID = $value;
	}
	/**
	 * @return dateTime
	 */
	function getRefundRequestedTime()
	{
		return $this->RefundRequestedTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setRefundRequestedTime($value)
	{
		$this->RefundRequestedTime = $value;
	}
	/**
	 * @return dateTime
	 */
	function getRefundCompletionTime()
	{
		return $this->RefundCompletionTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setRefundCompletionTime($value)
	{
		$this->RefundCompletionTime = $value;
	}
	/**
	 * @return dateTime
	 */
	function getEstimatedRefundCompletionTime()
	{
		return $this->EstimatedRefundCompletionTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setEstimatedRefundCompletionTime($value)
	{
		$this->EstimatedRefundCompletionTime = $value;
	}
	/**
	 * @return string
	 */
	function getSellerNoteToBuyer()
	{
		return $this->SellerNoteToBuyer;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setSellerNoteToBuyer($value)
	{
		$this->SellerNoteToBuyer = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('RefundType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'RefundFromSeller' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'TotalRefundToBuyer' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundID' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundTransactionArray' =>
					array(
						'required' => false,
						'type' => 'RefundTransactionArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundAmount' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundStatus' =>
					array(
						'required' => false,
						'type' => 'RefundStatusCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundFailureReason' =>
					array(
						'required' => false,
						'type' => 'RefundFailureReasonType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundFundingSourceArray' =>
					array(
						'required' => false,
						'type' => 'RefundFundingSourceArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ExternalReferenceID' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundRequestedTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundCompletionTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'EstimatedRefundCompletionTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'SellerNoteToBuyer' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
