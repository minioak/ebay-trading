<?php
// autogenerated file 30.09.2013 15:20
// $Id: $
// $Log: $
//
//
require_once 'RefundSourceTypeCodeType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'UserIdentityType.php';
require_once 'AmountType.php';
require_once 'PaymentTransactionStatusCodeType.php';
require_once 'TransactionReferenceType.php';

/**
 * Type defining the <strong>Refund</strong> container, which consists of detailed 
 * information on an In-Store Pickup item refund.<br/><br/><span 
 * class="tablenote"><strong>Note:</strong> At this time, the In-Store Pickup 
 * feature is generally only available to large retail merchants, and can only be 
 * applied to multi-quantity, fixed-price listings. Sellers who are eligible for 
 * the In-Store Pickup feature can start listing items in Production with the 
 * In-Store Pickup option beginning later in Q3 2013. </span> 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/RefundTransactionInfoType.html
 *
 */
class RefundTransactionInfoType extends EbatNs_ComplexType
{
	/**
	 * @var PaymentTransactionStatusCodeType
	 */
	protected $RefundStatus;
	/**
	 * @var RefundSourceTypeCodeType
	 */
	protected $RefundType;
	/**
	 * @var UserIdentityType
	 */
	protected $RefundTo;
	/**
	 * @var dateTime
	 */
	protected $RefundTime;
	/**
	 * @var AmountType
	 */
	protected $RefundAmount;
	/**
	 * @var TransactionReferenceType
	 */
	protected $ReferenceID;
	/**
	 * @var AmountType
	 */
	protected $FeeOrCreditAmount;

	/**
	 * @return PaymentTransactionStatusCodeType
	 */
	function getRefundStatus()
	{
		return $this->RefundStatus;
	}
	/**
	 * @return void
	 * @param PaymentTransactionStatusCodeType $value 
	 */
	function setRefundStatus($value)
	{
		$this->RefundStatus = $value;
	}
	/**
	 * @return RefundSourceTypeCodeType
	 */
	function getRefundType()
	{
		return $this->RefundType;
	}
	/**
	 * @return void
	 * @param RefundSourceTypeCodeType $value 
	 */
	function setRefundType($value)
	{
		$this->RefundType = $value;
	}
	/**
	 * @return UserIdentityType
	 */
	function getRefundTo()
	{
		return $this->RefundTo;
	}
	/**
	 * @return void
	 * @param UserIdentityType $value 
	 */
	function setRefundTo($value)
	{
		$this->RefundTo = $value;
	}
	/**
	 * @return dateTime
	 */
	function getRefundTime()
	{
		return $this->RefundTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setRefundTime($value)
	{
		$this->RefundTime = $value;
	}
	/**
	 * @return AmountType
	 */
	function getRefundAmount()
	{
		return $this->RefundAmount;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setRefundAmount($value)
	{
		$this->RefundAmount = $value;
	}
	/**
	 * @return TransactionReferenceType
	 */
	function getReferenceID()
	{
		return $this->ReferenceID;
	}
	/**
	 * @return void
	 * @param TransactionReferenceType $value 
	 */
	function setReferenceID($value)
	{
		$this->ReferenceID = $value;
	}
	/**
	 * @return AmountType
	 */
	function getFeeOrCreditAmount()
	{
		return $this->FeeOrCreditAmount;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setFeeOrCreditAmount($value)
	{
		$this->FeeOrCreditAmount = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('RefundTransactionInfoType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'RefundStatus' =>
					array(
						'required' => false,
						'type' => 'PaymentTransactionStatusCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundType' =>
					array(
						'required' => false,
						'type' => 'RefundSourceTypeCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundTo' =>
					array(
						'required' => false,
						'type' => 'UserIdentityType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundAmount' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ReferenceID' =>
					array(
						'required' => false,
						'type' => 'TransactionReferenceType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'FeeOrCreditAmount' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
