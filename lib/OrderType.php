<?php
// autogenerated file 30.09.2013 15:20
// $Id: $
// $Log: $
//
//
require_once 'CheckoutStatusType.php';
require_once 'RefundArrayType.php';
require_once 'ShippingServiceOptionsType.php';
require_once 'TradingRoleCodeType.php';
require_once 'ShippingDetailsType.php';
require_once 'PaymentHoldStatusCodeType.php';
require_once 'AddressType.php';
require_once 'OrderStatusCodeType.php';
require_once 'PickupDetailsType.php';
require_once 'UserIDType.php';
require_once 'OrderIDType.php';
require_once 'PickupMethodSelectedType.php';
require_once 'BuyerPaymentMethodCodeType.php';
require_once 'PaymentsInformationType.php';
require_once 'AmountType.php';
require_once 'EbatNs_ComplexType.php';
require_once 'ExternalTransactionType.php';
require_once 'PaymentHoldDetailType.php';
require_once 'TransactionArrayType.php';
require_once 'MultiLegShippingDetailsType.php';

/**
 * There are single line item and multiple line item orders. A singlepayment is 
 * made for both order types.<br><br>We strongly recommend that you avoid mixing 
 * digital and non-digital listings inthe same Combined Payment order. 
 *
 * @link http://developer.ebay.com/DevZone/XML/docs/Reference/eBay/types/OrderType.html
 *
 */
class OrderType extends EbatNs_ComplexType
{
	/**
	 * @var OrderIDType
	 */
	protected $OrderID;
	/**
	 * @var OrderStatusCodeType
	 */
	protected $OrderStatus;
	/**
	 * @var AmountType
	 */
	protected $AdjustmentAmount;
	/**
	 * @var AmountType
	 */
	protected $AmountPaid;
	/**
	 * @var AmountType
	 */
	protected $AmountSaved;
	/**
	 * @var CheckoutStatusType
	 */
	protected $CheckoutStatus;
	/**
	 * @var ShippingDetailsType
	 */
	protected $ShippingDetails;
	/**
	 * @var TradingRoleCodeType
	 */
	protected $CreatingUserRole;
	/**
	 * @var dateTime
	 */
	protected $CreatedTime;
	/**
	 * @var BuyerPaymentMethodCodeType
	 */
	protected $PaymentMethods;
	/**
	 * @var string
	 */
	protected $SellerEmail;
	/**
	 * @var AddressType
	 */
	protected $ShippingAddress;
	/**
	 * @var ShippingServiceOptionsType
	 */
	protected $ShippingServiceSelected;
	/**
	 * @var AmountType
	 */
	protected $Subtotal;
	/**
	 * @var AmountType
	 */
	protected $Total;
	/**
	 * @var ExternalTransactionType
	 */
	protected $ExternalTransaction;
	/**
	 * @var TransactionArrayType
	 */
	protected $TransactionArray;
	/**
	 * @var UserIDType
	 */
	protected $BuyerUserID;
	/**
	 * @var dateTime
	 */
	protected $PaidTime;
	/**
	 * @var dateTime
	 */
	protected $ShippedTime;
	/**
	 * @var boolean
	 */
	protected $IntegratedMerchantCreditCardEnabled;
	/**
	 * @var boolean
	 */
	protected $BundlePurchase;
	/**
	 * @var string
	 */
	protected $BuyerCheckoutMessage;
	/**
	 * @var string
	 */
	protected $EIASToken;
	/**
	 * @var PaymentHoldStatusCodeType
	 */
	protected $PaymentHoldStatus;
	/**
	 * @var PaymentHoldDetailType
	 */
	protected $PaymentHoldDetails;
	/**
	 * @var RefundArrayType
	 */
	protected $RefundArray;
	/**
	 * @var AmountType
	 */
	protected $RefundAmount;
	/**
	 * @var string
	 */
	protected $RefundStatus;
	/**
	 * @var boolean
	 */
	protected $IsMultiLegShipping;
	/**
	 * @var MultiLegShippingDetailsType
	 */
	protected $MultiLegShippingDetails;
	/**
	 * @var PaymentsInformationType
	 */
	protected $MonetaryDetails;
	/**
	 * @var PickupDetailsType
	 */
	protected $PickupDetails;
	/**
	 * @var PickupMethodSelectedType
	 */
	protected $PickupMethodSelected;
	/**
	 * @var UserIDType
	 */
	protected $SellerUserID;
	/**
	 * @var string
	 */
	protected $SellerEIASToken;

	/**
	 * @return OrderIDType
	 */
	function getOrderID()
	{
		return $this->OrderID;
	}
	/**
	 * @return void
	 * @param OrderIDType $value 
	 */
	function setOrderID($value)
	{
		$this->OrderID = $value;
	}
	/**
	 * @return OrderStatusCodeType
	 */
	function getOrderStatus()
	{
		return $this->OrderStatus;
	}
	/**
	 * @return void
	 * @param OrderStatusCodeType $value 
	 */
	function setOrderStatus($value)
	{
		$this->OrderStatus = $value;
	}
	/**
	 * @return AmountType
	 */
	function getAdjustmentAmount()
	{
		return $this->AdjustmentAmount;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setAdjustmentAmount($value)
	{
		$this->AdjustmentAmount = $value;
	}
	/**
	 * @return AmountType
	 */
	function getAmountPaid()
	{
		return $this->AmountPaid;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setAmountPaid($value)
	{
		$this->AmountPaid = $value;
	}
	/**
	 * @return AmountType
	 */
	function getAmountSaved()
	{
		return $this->AmountSaved;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setAmountSaved($value)
	{
		$this->AmountSaved = $value;
	}
	/**
	 * @return CheckoutStatusType
	 */
	function getCheckoutStatus()
	{
		return $this->CheckoutStatus;
	}
	/**
	 * @return void
	 * @param CheckoutStatusType $value 
	 */
	function setCheckoutStatus($value)
	{
		$this->CheckoutStatus = $value;
	}
	/**
	 * @return ShippingDetailsType
	 */
	function getShippingDetails()
	{
		return $this->ShippingDetails;
	}
	/**
	 * @return void
	 * @param ShippingDetailsType $value 
	 */
	function setShippingDetails($value)
	{
		$this->ShippingDetails = $value;
	}
	/**
	 * @return TradingRoleCodeType
	 */
	function getCreatingUserRole()
	{
		return $this->CreatingUserRole;
	}
	/**
	 * @return void
	 * @param TradingRoleCodeType $value 
	 */
	function setCreatingUserRole($value)
	{
		$this->CreatingUserRole = $value;
	}
	/**
	 * @return dateTime
	 */
	function getCreatedTime()
	{
		return $this->CreatedTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setCreatedTime($value)
	{
		$this->CreatedTime = $value;
	}
	/**
	 * @return BuyerPaymentMethodCodeType
	 * @param integer $index 
	 */
	function getPaymentMethods($index = null)
	{
		if ($index !== null) {
			return $this->PaymentMethods[$index];
		} else {
			return $this->PaymentMethods;
		}
	}
	/**
	 * @return void
	 * @param BuyerPaymentMethodCodeType $value 
	 * @param  $index 
	 */
	function setPaymentMethods($value, $index = null)
	{
		if ($index !== null) {
			$this->PaymentMethods[$index] = $value;
		} else {
			$this->PaymentMethods = $value;
		}
	}
	/**
	 * @return void
	 * @param BuyerPaymentMethodCodeType $value 
	 */
	function addPaymentMethods($value)
	{
		$this->PaymentMethods[] = $value;
	}
	/**
	 * @return string
	 */
	function getSellerEmail()
	{
		return $this->SellerEmail;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setSellerEmail($value)
	{
		$this->SellerEmail = $value;
	}
	/**
	 * @return AddressType
	 */
	function getShippingAddress()
	{
		return $this->ShippingAddress;
	}
	/**
	 * @return void
	 * @param AddressType $value 
	 */
	function setShippingAddress($value)
	{
		$this->ShippingAddress = $value;
	}
	/**
	 * @return ShippingServiceOptionsType
	 */
	function getShippingServiceSelected()
	{
		return $this->ShippingServiceSelected;
	}
	/**
	 * @return void
	 * @param ShippingServiceOptionsType $value 
	 */
	function setShippingServiceSelected($value)
	{
		$this->ShippingServiceSelected = $value;
	}
	/**
	 * @return AmountType
	 */
	function getSubtotal()
	{
		return $this->Subtotal;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setSubtotal($value)
	{
		$this->Subtotal = $value;
	}
	/**
	 * @return AmountType
	 */
	function getTotal()
	{
		return $this->Total;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setTotal($value)
	{
		$this->Total = $value;
	}
	/**
	 * @return ExternalTransactionType
	 * @param integer $index 
	 */
	function getExternalTransaction($index = null)
	{
		if ($index !== null) {
			return $this->ExternalTransaction[$index];
		} else {
			return $this->ExternalTransaction;
		}
	}
	/**
	 * @return void
	 * @param ExternalTransactionType $value 
	 * @param  $index 
	 */
	function setExternalTransaction($value, $index = null)
	{
		if ($index !== null) {
			$this->ExternalTransaction[$index] = $value;
		} else {
			$this->ExternalTransaction = $value;
		}
	}
	/**
	 * @return void
	 * @param ExternalTransactionType $value 
	 */
	function addExternalTransaction($value)
	{
		$this->ExternalTransaction[] = $value;
	}
	/**
	 * @return TransactionArrayType
	 */
	function getTransactionArray()
	{
		return $this->TransactionArray;
	}
	/**
	 * @return void
	 * @param TransactionArrayType $value 
	 */
	function setTransactionArray($value)
	{
		$this->TransactionArray = $value;
	}
	/**
	 * @return UserIDType
	 */
	function getBuyerUserID()
	{
		return $this->BuyerUserID;
	}
	/**
	 * @return void
	 * @param UserIDType $value 
	 */
	function setBuyerUserID($value)
	{
		$this->BuyerUserID = $value;
	}
	/**
	 * @return dateTime
	 */
	function getPaidTime()
	{
		return $this->PaidTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setPaidTime($value)
	{
		$this->PaidTime = $value;
	}
	/**
	 * @return dateTime
	 */
	function getShippedTime()
	{
		return $this->ShippedTime;
	}
	/**
	 * @return void
	 * @param dateTime $value 
	 */
	function setShippedTime($value)
	{
		$this->ShippedTime = $value;
	}
	/**
	 * @return boolean
	 */
	function getIntegratedMerchantCreditCardEnabled()
	{
		return $this->IntegratedMerchantCreditCardEnabled;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setIntegratedMerchantCreditCardEnabled($value)
	{
		$this->IntegratedMerchantCreditCardEnabled = $value;
	}
	/**
	 * @return boolean
	 */
	function getBundlePurchase()
	{
		return $this->BundlePurchase;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setBundlePurchase($value)
	{
		$this->BundlePurchase = $value;
	}
	/**
	 * @return string
	 */
	function getBuyerCheckoutMessage()
	{
		return $this->BuyerCheckoutMessage;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setBuyerCheckoutMessage($value)
	{
		$this->BuyerCheckoutMessage = $value;
	}
	/**
	 * @return string
	 */
	function getEIASToken()
	{
		return $this->EIASToken;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setEIASToken($value)
	{
		$this->EIASToken = $value;
	}
	/**
	 * @return PaymentHoldStatusCodeType
	 */
	function getPaymentHoldStatus()
	{
		return $this->PaymentHoldStatus;
	}
	/**
	 * @return void
	 * @param PaymentHoldStatusCodeType $value 
	 */
	function setPaymentHoldStatus($value)
	{
		$this->PaymentHoldStatus = $value;
	}
	/**
	 * @return PaymentHoldDetailType
	 */
	function getPaymentHoldDetails()
	{
		return $this->PaymentHoldDetails;
	}
	/**
	 * @return void
	 * @param PaymentHoldDetailType $value 
	 */
	function setPaymentHoldDetails($value)
	{
		$this->PaymentHoldDetails = $value;
	}
	/**
	 * @return RefundArrayType
	 */
	function getRefundArray()
	{
		return $this->RefundArray;
	}
	/**
	 * @return void
	 * @param RefundArrayType $value 
	 */
	function setRefundArray($value)
	{
		$this->RefundArray = $value;
	}
	/**
	 * @return AmountType
	 */
	function getRefundAmount()
	{
		return $this->RefundAmount;
	}
	/**
	 * @return void
	 * @param AmountType $value 
	 */
	function setRefundAmount($value)
	{
		$this->RefundAmount = $value;
	}
	/**
	 * @return string
	 */
	function getRefundStatus()
	{
		return $this->RefundStatus;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setRefundStatus($value)
	{
		$this->RefundStatus = $value;
	}
	/**
	 * @return boolean
	 */
	function getIsMultiLegShipping()
	{
		return $this->IsMultiLegShipping;
	}
	/**
	 * @return void
	 * @param boolean $value 
	 */
	function setIsMultiLegShipping($value)
	{
		$this->IsMultiLegShipping = $value;
	}
	/**
	 * @return MultiLegShippingDetailsType
	 */
	function getMultiLegShippingDetails()
	{
		return $this->MultiLegShippingDetails;
	}
	/**
	 * @return void
	 * @param MultiLegShippingDetailsType $value 
	 */
	function setMultiLegShippingDetails($value)
	{
		$this->MultiLegShippingDetails = $value;
	}
	/**
	 * @return PaymentsInformationType
	 */
	function getMonetaryDetails()
	{
		return $this->MonetaryDetails;
	}
	/**
	 * @return void
	 * @param PaymentsInformationType $value 
	 */
	function setMonetaryDetails($value)
	{
		$this->MonetaryDetails = $value;
	}
	/**
	 * @return PickupDetailsType
	 */
	function getPickupDetails()
	{
		return $this->PickupDetails;
	}
	/**
	 * @return void
	 * @param PickupDetailsType $value 
	 */
	function setPickupDetails($value)
	{
		$this->PickupDetails = $value;
	}
	/**
	 * @return PickupMethodSelectedType
	 */
	function getPickupMethodSelected()
	{
		return $this->PickupMethodSelected;
	}
	/**
	 * @return void
	 * @param PickupMethodSelectedType $value 
	 */
	function setPickupMethodSelected($value)
	{
		$this->PickupMethodSelected = $value;
	}
	/**
	 * @return UserIDType
	 */
	function getSellerUserID()
	{
		return $this->SellerUserID;
	}
	/**
	 * @return void
	 * @param UserIDType $value 
	 */
	function setSellerUserID($value)
	{
		$this->SellerUserID = $value;
	}
	/**
	 * @return string
	 */
	function getSellerEIASToken()
	{
		return $this->SellerEIASToken;
	}
	/**
	 * @return void
	 * @param string $value 
	 */
	function setSellerEIASToken($value)
	{
		$this->SellerEIASToken = $value;
	}
	/**
	 * @return 
	 */
	function __construct()
	{
		parent::__construct('OrderType', 'urn:ebay:apis:eBLBaseComponents');
		if (!isset(self::$_elements[__CLASS__]))
				self::$_elements[__CLASS__] = array_merge(self::$_elements[get_parent_class()],
				array(
					'OrderID' =>
					array(
						'required' => false,
						'type' => 'OrderIDType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'OrderStatus' =>
					array(
						'required' => false,
						'type' => 'OrderStatusCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'AdjustmentAmount' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'AmountPaid' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'AmountSaved' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'CheckoutStatus' =>
					array(
						'required' => false,
						'type' => 'CheckoutStatusType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ShippingDetails' =>
					array(
						'required' => false,
						'type' => 'ShippingDetailsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'CreatingUserRole' =>
					array(
						'required' => false,
						'type' => 'TradingRoleCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'CreatedTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PaymentMethods' =>
					array(
						'required' => false,
						'type' => 'BuyerPaymentMethodCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => true,
						'cardinality' => '0..*'
					),
					'SellerEmail' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ShippingAddress' =>
					array(
						'required' => false,
						'type' => 'AddressType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ShippingServiceSelected' =>
					array(
						'required' => false,
						'type' => 'ShippingServiceOptionsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'Subtotal' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'Total' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ExternalTransaction' =>
					array(
						'required' => false,
						'type' => 'ExternalTransactionType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => true,
						'cardinality' => '0..*'
					),
					'TransactionArray' =>
					array(
						'required' => false,
						'type' => 'TransactionArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'BuyerUserID' =>
					array(
						'required' => false,
						'type' => 'UserIDType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PaidTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'ShippedTime' =>
					array(
						'required' => false,
						'type' => 'dateTime',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'IntegratedMerchantCreditCardEnabled' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'BundlePurchase' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'BuyerCheckoutMessage' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'EIASToken' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PaymentHoldStatus' =>
					array(
						'required' => false,
						'type' => 'PaymentHoldStatusCodeType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PaymentHoldDetails' =>
					array(
						'required' => false,
						'type' => 'PaymentHoldDetailType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundArray' =>
					array(
						'required' => false,
						'type' => 'RefundArrayType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundAmount' =>
					array(
						'required' => false,
						'type' => 'AmountType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'RefundStatus' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'IsMultiLegShipping' =>
					array(
						'required' => false,
						'type' => 'boolean',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MultiLegShippingDetails' =>
					array(
						'required' => false,
						'type' => 'MultiLegShippingDetailsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'MonetaryDetails' =>
					array(
						'required' => false,
						'type' => 'PaymentsInformationType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PickupDetails' =>
					array(
						'required' => false,
						'type' => 'PickupDetailsType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'PickupMethodSelected' =>
					array(
						'required' => false,
						'type' => 'PickupMethodSelectedType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'SellerUserID' =>
					array(
						'required' => false,
						'type' => 'UserIDType',
						'nsURI' => 'urn:ebay:apis:eBLBaseComponents',
						'array' => false,
						'cardinality' => '0..1'
					),
					'SellerEIASToken' =>
					array(
						'required' => false,
						'type' => 'string',
						'nsURI' => 'http://www.w3.org/2001/XMLSchema',
						'array' => false,
						'cardinality' => '0..1'
					)
				));
	}
}
?>
